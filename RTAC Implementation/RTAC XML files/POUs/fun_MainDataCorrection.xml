<RTACModule>
  <LogicEngineObject>
    <Name>fun_MainDataCorrection</Name>
    <Type>Function</Type>
    <Interface><![CDATA[FUNCTION fun_MainDataCorrection : ARRAY [0 .. Length_max_large_GB-1] OF CMV;

VAR_INPUT
	Nzones : UINT;
	Npmus : ARRAY[0..Length_max_low_GB-1] OF INT;
	Nmeasurement : ARRAY[0..Length_max_low_GB-1] OF INT;
	threshold_mat : ARRAY[0..Length_max_low_GB-1] OF struct_ComplexRect;
	baseVector_PMU_indices : DynamicVectors.class_BaseVector(Length_max_medium_GB*SIZEOF(UINT),max_Nzones);		/// Assume maximum of 10 zones
	baseVector_orthoH_values : DynamicVectors.class_BaseVector(Length_max_large_GB*SIZEOF(struct_ComplexRect),max_Nzones);
	y_values : ARRAY [0 .. Length_max_large_GB-1] OF struct_ComplexRect;
END_VAR

VAR
	Row : UINT;
	zone : UINT; 
	temp_zone : UINT;   // To get file name in every second value
	temp_mes_start : UINT;	// To extract zone measurements
	temp_mes_end : UINT;
	temp_mes_start2 : UINT;	// To insert zone measurements
	temp_mes_end2 : UINT;
	temp_pmu_start : UINT;	// To insert corrected solution
	temp_pmu_end : UINT;
	zone_NPMUs : UINT;
	zone_Nmeas : UINT; 
	threshold : struct_ComplexRect;
	zone_PMU_indices_UINT : ARRAY[0..Length_max_medium_GB-1] OF UINT;
	zone_orthoH_values : ARRAY [0 .. Length_max_large_GB-1] OF struct_ComplexRect;
	temp_count :UINT;
	zone_y_values : ARRAY [0 .. Length_max_large_GB-1] OF struct_ComplexRect;
	y_hat_results : ARRAY [0 .. Length_max_large_GB-1] OF vector_t;					/// A array to store output of Data correction results
	zone_solution_deg : ARRAY [0 .. Length_max_low_GB-1] OF REAL;
	temp_y_hat_send : ARRAY [0 .. Length_max_large_GB-1] OF CMV;					/// A array to send Data correction results
END_VAR

VAR_OUTPUT
	temp_isAttack : BOOL;
	temp_solution_deg_final : ARRAY [0 .. Length_max_low_GB-1] OF REAL;
END_VAR]]></Interface>
    <Implementation><![CDATA[temp_zone := 0;
temp_mes_start :=0;
temp_mes_start2 := 0;
temp_pmu_start := 0;
/// For each zone read pmu indices and orthogonal matrix
FOR zone := 0 TO Nzones-1 DO
	zone_NPMUs := INT_TO_UINT(Npmus[zone]);
	zone_Nmeas := INT_TO_UINT(Nmeasurement[zone]);
	threshold := threshold_mat[zone];
	
	baseVector_PMU_indices.GetCopyOfElement(zone,ADR(zone_PMU_indices_UINT));
	baseVector_orthoH_values.GetCopyOfElement(zone,ADR(zone_orthoH_values));
	
	temp_zone := temp_zone + 2;
	
	/// Apply data correction algorithm on PMU data vector y_values
	/// extract the measurements for the zone
	temp_count := 0;
	temp_mes_end := temp_mes_start + zone_Nmeas;
	FOR Row := temp_mes_start TO temp_mes_end-1 DO
		zone_y_values[temp_count] := y_values[Row];
		temp_count := temp_count +1;
	END_FOR

	y_hat_results := fun_DataCorrection(zone_y_values,zone_orthoH_values,zone_PMU_indices_UINT, threshold, zone_Nmeas, zone_NPMUs,zoneIsAttack=>temp_isAttack,solution_deg_temp=>zone_solution_deg);
	
	/// insert the corrected measurement to total y_hat array
	temp_count := 0;
	temp_mes_end2 := temp_mes_start2 + zone_Nmeas;
	FOR Row := temp_mes_start2 TO temp_mes_end2-1 DO
		temp_y_hat_send[Row].instCVal := y_hat_results[temp_count];
		temp_y_hat_send[Row].cVal := y_hat_results[temp_count];
		//temp_y_hat_send[Row].t.value.dateTime :=PMU100_PMU100.TIMESTAMP.value.dateTime;
		//temp_y_hat_send[Row].q.validity := PMU100_PMU100.B102_V.q.validity;
		temp_count := temp_count +1;
	END_FOR
	
	/// insert the estimated angle biases to PMU array
	temp_count := 0;
	temp_pmu_end := temp_pmu_start + zone_NPMUs;
	FOR Row := temp_pmu_start TO temp_pmu_end-1 DO
		temp_solution_deg_final[Row] := zone_solution_deg[temp_count];
		temp_count := temp_count +1;
	END_FOR
	
	temp_mes_start := temp_mes_end;
	temp_mes_start2 := temp_mes_end2;
	temp_pmu_start := temp_pmu_end;
	
	//FOR Row := 0 TO temp_count-1 DO
		//zone_y_values[Row] := 0;		/// reset the array
	//END_FOR
END_FOR

fun_MainDataCorrection := temp_y_hat_send;]]></Implementation>
    <Metadata><![CDATA[<Single xml:space="preserve" Type="{81297157-7ec9-45ce-845e-84cab2b88ade}" Method="IArchivable">
  <Dictionary Type="{2c41fa04-1834-41c1-816e-303c7aa2c05b}" Name="Properties" />
  <Single Name="TypeGuid" Type="System.Guid">6f9dac99-8de1-4efc-8465-68ac443b7d08</Single>
</Single>]]></Metadata>
  </LogicEngineObject>
</RTACModule>