<RTACModule>
  <LogicEngineObject>
    <Name>fun_DataCorrection</Name>
    <Type>Function</Type>
    <Interface><![CDATA[FUNCTION fun_DataCorrection : ARRAY[0..Length_max_large_GB-1] OF vector_t
VAR CONSTANT
pi : LREAL := 3.141592653589793;
init0 : struct_ComplexRect :=(Re:=0,Im:=0);
init1 : struct_ComplexRect :=(Re:=1,Im:=0);
END_VAR

VAR_INPUT
	y_values : ARRAY [0 .. Length_max_large_GB-1] OF struct_ComplexRect ;
	orthoH_values : ARRAY [0 .. Length_max_large_GB-1] OF struct_ComplexRect;
	pmu_indices : ARRAY[0 .. Length_max_medium_GB-1] OF UINT;
	threshold : struct_ComplexRect;
	N_measurements : UINT;
	N_PMUs : UINT;
END_VAR

VAR_OUTPUT
	zoneIsAttack : BOOL := FALSE;
	solution_deg_temp : ARRAY [0 .. Length_max_low_GB-1] OF REAL;
END_VAR

VAR
Row : UINT ;
Col : UINT ;	
//see : ARRAY [0 .. 33] OF struct_ComplexRect;
//see : ARRAY [0 .. 199] OF struct_ComplexRect;
itr : UINT;
termination : struct_ComplexRect;
j: UINT;
id: UINT;
itrj : UINT;
itrk : UINT;
Unsolved : BOOL;
val : LREAL;
size_comp : UINT;
size_supp : UINT;
select : UINT;
omp_itr : UINT := 0;
criterion : UINT := 1;
ITRR : UINT;
tempp: UINT;

pt_Data : POINTER TO POINTER TO REAL;
pt_Data1 : POINTER TO ARRAY [0 .. Length_max_low_GB-1] OF struct_ComplexRect;
pt_Data2 : POINTER TO POINTER TO struct_ComplexRect;

y : MathMatrix.class_Matrix(Length_max_low_GB,1);
OrthoH : MathMatrix.class_Matrix(Length_max_low_GB, Length_max_low_GB);
Phi_inv :MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
out_residue: MathMatrix.class_Matrix(Length_max_low_GB,1);
out_termination : MathMatrix.class_Matrix(1,1);
y_hat : MathMatrix.class_Matrix(Length_max_low_GB,1);
error : BOOL ;
Phi :MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
temp_residue : MathMatrix.class_Matrix(Length_max_low_GB,1);
temp_const : MathMatrix.class_Matrix(Length_max_low_GB,1);
out_const : MathMatrix.class_Matrix(Length_max_low_GB,1);
OrthoH_const : MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
OrthoH_init : MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
y_const : MathMatrix.class_Matrix(Length_max_low_GB,1);
Scalar : struct_ComplexRect := (Re := -1, Im := 0);
Scalar_1 : struct_ComplexRect := (Re := 1, Im := 0);
P : MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
P1 : MathMatrix.class_Matrix(Length_max_low_GB,1);
y_P1 : MathMatrix.class_Matrix(Length_max_low_GB,1);
P_T : MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
temp_mat : MathMatrix.class_Matrix(Length_max_low_GB,Length_max_low_GB);
coefficient_matrix : MathMatrix.class_Matrix(Length_max_low_GB, Length_max_low_GB);

solution : ARRAY [0 .. Length_max_low_GB-1] OF struct_ComplexRect ;
solution_deg : ARRAY [0 .. Length_max_low_GB-1] OF REAL;
Solution_y_hat : ARRAY [0 .. Length_max_low_GB-1] OF struct_ComplexRect;
solution_degtemp : ARRAY [0 .. Length_max_low_GB-1] OF vector_t;
tmp_residue : ARRAY [0 .. 10] OF struct_ComplexRect;
projection : ARRAY [0 .. Length_max_low_GB-1] OF LREAL ;
support_alpha : ARRAY [0 .. Length_max_low_GB-1] OF UINT  ;
cum_support : ARRAY [0 .. Length_max_low_GB] OF UINT ;
support_all : ARRAY [0 .. Length_max_low_GB-1] OF BYTE ;
support_complement : ARRAY [0 .. Length_max_low_GB-1] OF BYTE ;
pt_byteVector1 : POINTER TO DynamicVectors.class_ByteVector();
pt_byteVector2 : POINTER TO DynamicVectors.class_ByteVector();

coefficient_matrix_resize : MathMatrix.class_Matrix(1, 1);
rhs : MathMatrix.class_Matrix(1,1);
coefficient_matrix1 :ARRAY [0 ..Length_max_low_GB*Length_max_low_GB] OF struct_ComplexRect;
rhs1 :ARRAY [0 ..Length_max_low_GB*Length_max_low_GB] OF struct_ComplexRect;
rhs_resize :MathMatrix.class_Matrix(1,1);
pt_Data4 : POINTER TO POINTER TO struct_ComplexRect;
END_VAR]]></Interface>
    <Implementation><![CDATA[// reset the sizes of the matrices appropriately
y.SetSize(rowCount := N_measurements, colCount := 1);
OrthoH.SetSize(rowCount := N_measurements, colCount := N_measurements);
OrthoH_const.SetSize(rowCount := N_measurements, colCount := N_measurements);
OrthoH_init.SetSize(rowCount := N_measurements, colCount := N_measurements);

Phi_inv.SetSize(rowCount := N_measurements, colCount := N_measurements);
Phi.SetSize(rowCount := N_measurements, colCount := N_measurements);
out_residue.SetSize(rowCount := N_measurements, colCount := 1);
temp_residue.SetSize(rowCount := N_measurements, colCount := 1);
temp_const.SetSize(rowCount := N_measurements, colCount := 1);
out_const.SetSize(rowCount := N_measurements, colCount := 1);
y_hat.SetSize(rowCount := N_measurements, colCount := 1);
y_const.SetSize(rowCount := N_measurements, colCount := 1);
P.SetSize(rowCount := N_measurements, colCount := N_PMUs);
P1.SetSize(rowCount := N_measurements, colCount := 1);
y_P1.SetSize(rowCount := N_measurements, colCount := 1);
P_T.SetSize(rowCount := N_PMUs , colCount := N_measurements);
temp_mat.SetSize(rowCount := N_PMUs , colCount := N_PMUs);
coefficient_matrix.SetSize(rowCount := N_PMUs , colCount := N_PMUs);

// Initialize the matrices and vectors
FOR Row := 0 TO OrthoH.Rows - 1 DO

/// load OrthoH_values to OrthoH and y_values to y	
SysMemCpy(OrthoH.pt_Data[Row], ADR(OrthoH_values[OrthoH.Cols*Row]), N_measurements*SIZEOF(struct_ComplexRect)); // Projection Matrix
pt_Data1 := OrthoH.pt_Data;

pt_Data2 := y.pt_Data; // PMU data vector
pt_Data2[Row][0] := y_values[Row];

END_FOR 

/// creating I matrix		
FOR Row := 0 TO N_measurements-1 DO //Inverse of the Phi matrix
pt_Data2 := Phi_inv.pt_Data;
pt_Data2[Row][Row] := init1;
END_FOR

FOR Itr := 0 TO N_PMUs-1 DO
support_alpha[Itr] :=0;
solution_deg[Itr] := 0;
cum_support[Itr] := 0;
solution[Itr] := init0;
END_FOR

FOR Itr := 0 TO N_measurements-1 DO
support_all[Itr]:=0;
END_FOR

// Coumputing the residue
MathMatrix.fun_MatrixMultiply(Phi_inv,y,temp_residue);
MathMatrix.fun_MatrixMultiply(OrthoH,temp_residue,out_residue);
MathMatrix.fun_Matrix_ATA(TRUE, out_residue,out_termination); // Computing the l2 norm squared of residue
pt_Data2 := out_termination.pt_Data;
termination := pt_Data2[0][0];    ///  ???

//// If you need to visualize a vector, use this. Instead of y, use the vector of your interest.
//FOR Row := 0 TO N_meas-1 DO
//pt_Data2 := temp_residue.pt_Data;
//see[Row] := pt_Data2[Row][0];
//END_FOR

pt_byteVector1 := fun_NewTypeVector(BYTE_VECTOR);
pt_byteVector2 := fun_NewTypeVector(BYTE_VECTOR);
		
// Begin OMP Algorithm

FOR omp_itr := 0 TO N_PMUs-2 DO	

//Termination criterion	
IF fun_ComplexAbs(termination) <= fun_ComplexAbs(threshold) THEN
	EXIT;
END_IF

zoneIsAttack := TRUE;
// Here we compute the squared l2 norm of sub vectors of out_residue which corresponds to each pmu. 

/// pmu_indices = [0,5,12...] this is the index set of the pmus in the measurement vector. so 0,1,2,3,4 is the voltage and current mes in first pmu and so on
FOR itr :=0 TO N_PMUs-1  DO
	FOR itrj := pmu_indices[itr] TO pmu_indices[itr+1] - 1 DO
	pt_Data2 := out_residue.pt_Data;
	tmp_residue[itrj - pmu_indices[itr]] := pt_Data2[itrj][0];	// Saves the entries of out_residue corresponding to the PMU itr into tmp_residue. tmp_residue is filled in 0,1,2 etc
	END_FOR
	FOR itrk := 0 TO pmu_indices[itr+1] -  pmu_indices[itr] DO // Compute the l2 norm of tmp_residue
		val := val + fun_ComplexAbs(tmp_residue[itrk])*fun_ComplexAbs(tmp_residue[itrk]); 
		tmp_residue[itrk] := init0;			/// reseting for inxt itr 
	END_FOR
	projection[itr] := val/(pmu_indices[itr+1] - pmu_indices[itr]);			/// nnz values in projection = n_pmus
	val :=0;
END_FOR
	
// Setting the projection of  PMUs corresponding to current support to 0
FOR j := 0 TO omp_itr DO
	id := support_alpha[j];
	projection[id-1] := 0	;
END_FOR
	
// Finding the largest projection values
val := projection[0];
select := 1;
FOR itr :=0 TO N_PMUs-1  DO
	IF projection[itr]> val THEN
	val := projection[itr];
	select := itr+1; 	// pmus are go 1,2,3 instead of 0,1,2
	END_IF 
END_FOR
val :=0; // Reset val	
	
// Keeping track of the support - support alpha. each iteration update a list and then use that to update the  support_alpha matrix
pt_byteVector1^.Append(ADR(select), 1);

FOR itr := 0 TO N_PMUs-1 DO
pt_byteVector1^.GetAt(itr,element => support_alpha[itr]);
END_FOR

// Keeping track of the measurement idx corresponding to the support - support_all 
FOR itr := pmu_indices[select - 1]+1 TO pmu_indices[select] DO		 // because pmus are 1,2,3 but itr is going from 0,1,2 if think select =1
pt_byteVector2^.Append(ADR(itr),1);				// each iteration this list update with the indices of the corresponding pmu measurement
END_FOR
	
FOR itr := 0 TO N_measurements-1 DO
pt_byteVector2^.GetAt(itr,element => support_all[itr]);
END_FOR

// Keeping track of the measurement idx corresponding to the complement of the support 
support_complement := fun_SetDiff(support_all,N_measurements); 
size_comp := fun_Find(support_complement); 
size_supp := fun_Find(support_all);
cum_support[omp_itr + 1] := size_supp; 	// # measurements corresponding to all the support pmus. For each iteration # mes from new pmu is added and save in next location in cum_support
	
//Initialize OthoH_const and y_const - all to zero
FOR Itr := 0 TO N_measurements-1 DO
MathMatrix.fun_MatrixCopyColumn(Itr,Itr,OrthoH_init,OrthoH_const);
pt_Data2 := y_const.pt_Data;
pt_Data2[Itr][0] := init0;
END_FOR


// Compute the const value
FOR Itr := 0 TO size_comp-1 DO
MathMatrix.fun_MatrixCopyColumn(support_complement[Itr]-1,Itr,OrthoH,OrthoH_const);
pt_Data2 := y_const.pt_Data;
pt_Data2[Itr][0] := y_values[support_complement[Itr]-1];
END_FOR
MathMatrix.fun_MatrixMultiply(OrthoH_const, y_const, out_const); 

//Initialize P - all TO zero
FOR Itr := 0 TO N_PMUs-1 DO
MathMatrix.fun_MatrixCopyColumn(Itr,Itr,OrthoH_init,P);
END_FOR
	
FOR ITRR := 0 TO omp_itr DO

//Initialize y_P1 - all TO zero
FOR Itr := 0 TO N_measurements-1 DO
pt_Data2 := y_P1.pt_Data;
pt_Data2[Itr][0] := init0;
END_FOR

//tempp :=1;
// Compute the matrix P
FOR Itr := cum_support[ITRR] TO cum_support[ITRR+1]-1 DO   // need to start in zero. that is why above cum_support[omp_itr + 1] := size_supp; so cum_support[0] is always 0
pt_Data2 := y_P1.pt_Data;
pt_Data2[support_all[Itr]-1][0] := y_values[support_all[Itr]-1];
END_FOR
MathMatrix.fun_MatrixMultiply(OrthoH, y_P1,P1);
MathMatrix.fun_MatrixCopyColumn(0,ITRR,P1,P);
END_FOR

// Using Gaussian Elimination to solve the linear equation system 
MathMatrix.fun_MatrixTranspose(TRUE, P,P_T);
MathMatrix.fun_MatrixMultiply(P_T,P,coefficient_matrix);
MathMatrix.fun_MatrixMultiply(P_T,out_const,rhs);
rhs.MatrixScale(Scalar);

// Set the matrices to appropriate sizes
coefficient_matrix_resize.SetSize(rowCount := omp_itr+1, colCount := omp_itr+1);
rhs_resize.SetSize(rowCount := omp_itr+1, colCount := 1);

FOR Row := 0 TO omp_itr DO
FOR Col := 0 TO omp_itr DO
pt_Data4 := coefficient_matrix.pt_Data;
coefficient_matrix1[Row*(omp_itr+1) + Col] := pt_Data4[Row][Col];
pt_Data4 := coefficient_matrix_resize.pt_Data;
pt_Data4[Row][Col] := coefficient_matrix1[Row*(omp_itr+1) + Col];
END_FOR
pt_Data2 := rhs.pt_Data;
rhs1[Row] := pt_Data2[Row][0];
pt_Data2 := rhs_resize.pt_Data;
pt_Data2[Row][0] := rhs1[Row];
END_FOR

FOR Row := 0 TO omp_itr DO
IF NOT Unsolved THEN
pt_Data2 := rhs_resize.pt_Data;
solution[Row] := pt_Data2[Row][0];
END_IF
END_FOR

MathMatrix.fun_MatrixGaussianElim(coefficient_matrix_resize,rhs_resize,error => Unsolved);

// View the Solution in rectangular form  
FOR Row := 0 TO omp_itr DO
IF NOT Unsolved THEN
pt_Data2 := rhs_resize.pt_Data;
solution[Row] := pt_Data2[Row][0];
END_IF
END_FOR

FOR itr := 0 TO omp_itr DO
FOR itrj := cum_support[itr] TO cum_support[itr+1]-1 DO
pt_Data2 := Phi_inv.pt_Data;
pt_Data2[support_all[itrj]-1][support_all[itrj]-1] := solution[itr];
END_FOR 
END_FOR

// Coumputing the residue
MathMatrix.fun_MatrixMultiply(Phi_inv,y,temp_residue);
MathMatrix.fun_MatrixMultiply(OrthoH,temp_residue,out_residue);
	
//Computing the l2 norm squared OF residue
MathMatrix.fun_Matrix_ATA(TRUE, out_residue,out_termination);
pt_Data2 := out_termination.pt_Data;
termination := pt_Data2[0][0];
END_FOR

fun_DeleteVector(pt_byteVector1^);
fun_DeleteVector(pt_byteVector2^);

IF support_alpha[0] >0 THEN
	// Computing beta in retaungular and beta in polar cordniates	
	FOR Row :=0 TO omp_itr-1 DO	
	solution_degtemp[support_alpha[Row]-1]:= struct_ComplexRect_TO_vector_t(solution[Row]);
	solution_deg[support_alpha[Row]-1] := -1*solution_degtemp[support_alpha[Row]-1].ang;
	END_FOR
END_IF
	
//Compute y_hat
MathMatrix.fun_MatrixMultiply (Phi_inv, y, y_hat);

FOR Row := 0 TO N_measurements-1 DO
	fun_DataCorrection[Row] := struct_ComplexRect_TO_vector_t(y_hat.pt_Data[Row][0]);
END_FOR

FOR Row := 0 TO N_PMUs-1 DO
	solution_deg_temp[Row] := solution_deg[Row];
END_FOR

y.Clear();
OrthoH.Clear();
Phi_inv.clear();
out_residue.Clear();
out_termination.Clear();
y_hat.Clear();
Phi.Clear();
temp_residue.Clear();
temp_const.Clear();
out_const.Clear();
OrthoH_const.Clear();
OrthoH_init.Clear();
y_const.Clear();
P.Clear();
P1.Clear();
y_P1.Clear();
P_T.Clear();
temp_mat.Clear();
coefficient_matrix.Clear();
coefficient_matrix_resize.Clear();
rhs.Clear();
rhs_resize.Clear();]]></Implementation>
    <Metadata><![CDATA[<Single xml:space="preserve" Type="{81297157-7ec9-45ce-845e-84cab2b88ade}" Method="IArchivable">
  <Dictionary Type="{2c41fa04-1834-41c1-816e-303c7aa2c05b}" Name="Properties" />
  <Single Name="TypeGuid" Type="System.Guid">6f9dac99-8de1-4efc-8465-68ac443b7d08</Single>
</Single>]]></Metadata>
  </LogicEngineObject>
</RTACModule>